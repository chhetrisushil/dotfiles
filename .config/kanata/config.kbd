(defcfg
  process-unmapped-keys yes
)

(defsrc
  esc
  tab q w e r t y u i o p [  ] \
  caps a s d f g h j k l ;
  lshift z x c v b n m , . /
  lctl lmet lalt
)

(defvar
  tap-time 200
  hold-time 150
)

(deflayer base
  grv
  _ _ _ _ _ _ _ _ _ _ _ _ _ _
  @c2cNe @a @s @d @f _ _ @j @k @l @;
  _ _ _ _ _ _ _ _ _ _ _
  _ _ _
)

(deflayer nomods
  grv
  tab q w e r t y u i o p [  ] \
  @c2cNe a s d f g h j k l ;
  lshift z x c v b n m , . /
  lctl lmet lalt
)

(deflayer arrowNnumNsym
  grv
  _ 1 2 3 4 5 6 7 8 9 0 _ _ _
  @c2cNe _ _ _ _ _ left down up right _
  _ S-1 S-2 S-3 S-4 S-5 S-6 S-7 S-8 S-9 S-0 ;; symbols are defined with S-<num> emulating Shift + <num>
  _ _ _
)

(deffakekeys
  to-base (layer-switch base)
)

(defalias
  tap (multi
    (layer-switch nomods)
    (on-idle-fakekey to-base tap 20)
  )

  c2cNe     (tap-hold-press $tap-time $hold-time esc lctl)

  a (tap-hold-release $tap-time $hold-time (multi a @tap) lmet)
  s (tap-hold-release $tap-time $hold-time (multi s @tap) lalt)
  d (tap-hold-release $tap-time $hold-time (multi d @tap) lsft)
  f (tap-hold-release $tap-time $hold-time (multi f @tap) (layer-while-held arrowNnumNsym))
  j (tap-hold-release $tap-time $hold-time (multi j @tap) (layer-while-held arrowNnumNsym))
  k (tap-hold-release $tap-time $hold-time (multi k @tap) rsft)
  l (tap-hold-release $tap-time $hold-time (multi l @tap) ralt)
  ; (tap-hold-release $tap-time $hold-time (multi ; @tap) rmet)
)
